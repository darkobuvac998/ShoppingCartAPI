
node {

  stage('Git checkout') {
    checkout scmGit(branches: [[name: 'dev']], extensions: [], userRemoteConfigs: [[credentialsId: 'jenkins-github', url: 'git@github.com:darkobuvac998/ShoppingCartAPI.git']])
  }

  stage('NOTIFY SLACK'){
    sh 'echo Send notification'
  }

  stage('BUILD DOCKER IMAGES') {
    parallel ADMINISTRATION: {
      node {
        label 'dotnet-agent'
      }
      getBuildStages('administration', 'shopping-cart', '89-HEAD-943f6ae').call()
    },
    test: {
      getBuildStages('test', , 'shopping-cart', '89-HEAD-943f6ae').call()
    }
  }

  stage('LIST ALL DOCKER IMAGES'){
    node{
      label 'dotnet-agent'
    }

    sh 'docker image ls | grep codaxy'
  }

  post{
      always{
        sh 'docker container prune -f'
        sh 'docker rmi $(docker images --filter "dangling=true" -q --no-trunc)'
      }
  }
}

def getBuildStages(service, imageName, imageTag) {
  return {
    def oldHash
    def newHash
    stage('Get old image hash') {
      oldHash = getImageHash("${imageName}:${imageTag}")
      sh "echo ${oldHash}"
    }
    stage('Build docker image') {
      sh "docker build -t codaxy_${service}:${imageTag} -f docker/Dockerfile ."
      newHash = getImageHash("${imageName}:${imageTag}")
      sh "echo ${newHash}"
    }

    if (oldHash != newHash) {
      stage('Pack image') {
        sh "docker save codaxy_${service}:${imageTag} | gzip > ../sp1ne/images/codaxy_${service}:${imageTag}.tar.gz "
      }
      stage('Deploy image') {
        sh "Deploying codaxy_${service}:${imageTag}..."
      }
    }else {
      stage('Deploy skipped') {
        echo('There are no changes. Skipping deployment.')
      }
    }
  }
}

def getImageHash(image) {
  return sh(returnStdout: true, script: "docker inspect -f \"{{.Id}}\" ${image}").trim()
}

def getShortCommitHash() {
    return sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
}

def getCommitAuthorName() {
    return sh(returnStdout: true, script: 'git log -1 --pretty=format:"%an"').trim()
}

def getCommitAuthorEmail() {
    return sh(returnStdout: true, script: 'git show -s --pretty=%ae').trim()
}

def getCommitMessage() {
    return sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
}

def getChangeSet() {
    return sh(returnStdout: true, script: 'git diff-tree --no-commit-id --name-status -r HEAD').trim()
}

def getChangeLog() {
    return sh(returnStdout: true, script: "git log --date=short --pretty=format:'%ad %aN <%ae> %n%n%x09* %s%d%n%b'").trim()
}

def getCurrentBranch () {
    return sh(
            script: 'git name-rev --name-only HEAD',
            returnStdout: true
    ).trim()
}

def getDockerImageTag() {
    if (env.GIT_BRANCH == 'dev') {
        return 'dev'
    }
    if (env.GIT_BRANCH == 'staging') {
        return 'uat'
    }
    return 'latest'
}
