
node {
  stage('Git checkout') {
    checkout scmGit(branches: [[name: 'dev']], extensions: [], userRemoteConfigs: [[credentialsId: 'jenkins-github', url: 'git@github.com:darkobuvac998/ShoppingCartAPI.git']])
  }

  stage('Run parallel') {
    parallel ADMINISTRATION: {
      node {
        label 'dotnet-agent'
      }
      buildStagesDynamically('administration', '', 'shopping-cart', '89-HEAD-943f6ae').call()
    },
    test: {
      buildStagesDynamically('test', '', 'shopping-cart', '89-HEAD-943f6ae').call()
    }
  }
}

def buildStagesDynamically(service, buildAgent, imageName, imageTag) {
  return {
    stage('Get old image hash') {
      def oldHashName = "OLD_HASH_${service}".toUpperCase()
      env[oldHashName] = getImageHash("${imageName}:${imageTag}")
    }
    stage('Build docker image') {
      def newHashName = "NEW_HASH_${service}".toUpperCase()
      sh "docker build -t codaxy_${service}:${imageTag} -f docker/Dockerfile ."
      env[newHashName] = getImageHash("${imageName}:${imageTag}")
    }

    if (env[oldHashName] != env[newHashName]) {
      stage('Pack image') {
        sh "docker save codaxy_${service}:${imageTag} | gzip > ../sp1ne/images/codaxy_${service}:${imageTag}.tar.gz "
      }
      stage('Deploy image') {
        sh "Deploying codaxy_${service}:${imageTag}..."
      }
    }
  }
}

def getImageHash(image) {
  return sh(returnStdout: true, script: "docker inspect -f \"{{.Id}}\" ${image}").trim()
}
