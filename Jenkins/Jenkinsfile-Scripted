
node {
  stage('Run parallel') {
    parallel ADMINISTRATION: {
      node {
        label 'dotnet-agent'
      }
      buildStagesDynamically('test', '', 'shopping-cart', 'latest').call()
    },
    test: {
      buildStagesDynamically('test', '', 'shopping-cart', 'latest').call()
    }
  }
}

def buildStageDynamically(stageName) {
  return {
    stage("${stageName}") {
      node {
        label 'dotnet-agent'
      }

      sh 'echo Hello'
    }
  }
}

def buildStagesDynamically(service, buildAgent, imageName, imageTag) {
  return {
    def oldHash
    def newHash
    stage('Get old image hash') {
      oldHash = getImageHash("${imageName}:${imageTag}")
      sh 'echo $oldHash'
    }
    stage('Build docker image') {
      sh 'docker build -t codaxy_$service:$imageTag -f docker/$service/Dockerfile .'
      newHash = getImageHash("${imageName}:${imageTag}")
      sh 'echo $newHash'
    }

    if (oldHash != newHash) {
      stage('Pack image') {
        sh 'docker save codaxy_$service:$imageTag | gzip > ../sp1ne/images/codaxy_$service:$imageTag.tar.gz '
      }
      stage('Deploy image') {
        sh 'Deploying codaxy_$service:$imageTag...'
      }
    }
  }
}

def getImageHash(image) {
  return sh(returnStdout: true, script: "docker inspect -f \"{{.Id}}\" ${image}").trim()
}
